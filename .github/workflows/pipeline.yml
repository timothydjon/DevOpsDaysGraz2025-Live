name: Release Pipeline

on:
  push: {}

jobs:
  release-pipeline:
    name: Release Pipieline\
    runs-on: windows-latest
    env:
      CERT_NAME: cert.pfx
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dotnet tools
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Run core tests
        run: dotnet test .\src\DevOpsDaysTasks.Core.Tests

      - name: Run integration tests
        run: dotnet test .\src\DevOpsDaysTasks.IntegrationTests

      - name: Publish Build
        run: dotnet publish -c Release src\DevOpsDaysTasks.UI\ -o DevOpsDaysTasks /p:Version='1.0.0' /p:VersionName='1.0.0'

      - name: get external files
        uses: actions/checkout@v4
        with:
          repository: martinzimmermann/DevOpsDaysGraz2025-ExternalFiles
          path: ExternalFiles

      - name: copy template & help
        run: mkdir DevOpsDaysTasks\Templates && mkdir DevOpsDaysTasks\Help && cp ExternalFiles\Help.pdf DevOpsDaysTasks\Help\Help.pdf && cp ExternalFiles\default-tasks.xml DevOpsDaysTasks\Templates

      - name: create certificate
        run: |
          $base64 = "${{ secrets.SIGN_CERTIFICATE }}"
          $content = [System.Convert]::FromBase64String($base64)
          Set-Content -Path $env:CERT_NAME -Value $content -AsByteStream

      - name: sign exe
        run: .\scripts\sign.ps1 .\DevOpsDaysTasks\DevOpsDaysTasks.UI.exe -PfxFile ${{ env.CERT_NAME }} -PfxPassword Password

      - name: upload release (upload-artifact)
        uses: actions/upload-artifact@v4
        with:
          name: DevOpsDaysTasks
          path: DevOpsDaysTasks
